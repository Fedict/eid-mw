.distcheck:
  tags:
  - docker
  image: $CI_REGISTRY_IMAGE/deb-build:$CI_COMMIT_REF_SLUG
  before_script:
  - if [ ! -z "$ACNG" ]; then sed -i -e "s,http://,$ACNG/," /etc/apt/sources.list; else echo "no proxy configured"; fi
  - apt-get update
  - apt-get -y install --no-install-recommends autoconf automake libtool libpcsclite-dev libp11-kit-dev libgtk-3-dev libassuan-dev libgpg-error-dev libssl-dev libxml2-dev libcurl4-openssl-dev libproxy-dev plantuml zip gettext build-essential g++ git graphviz
  - pushd $LINUX_BASEDIR
  - autoreconf -f -i
  - popd
  script:
  - pushd $LINUX_BASEDIR
  - ./configure
  - make -j $(nproc) distcheck
  - popd
  after_script:
  - mkdir -p products/source
  - cp $LINUX_BASEDIR/eid-mw-*.tar.gz $LINUX_BASEDIR/eid-mw-*.zip products/source/
  - cp $LINUX_BASEDIR/.version products/source/version
  - pushd $LINUX_BASEDIR
  - COMMIT_DATE=$(git log --date=rfc HEAD^..HEAD|grep ^Date|cut -d ' ' -f 2-|sed -e 's/^\s*//')
  - popd
  - echo $COMMIT_DATE > products/source/date
  artifacts:
    when:
      on_success
    paths:
    - products/source

.robot:linux:
  variables:
    EID_ROBOT_STYLE: zetes:/dev/CARD:/dev/USB
    EID_DIALOGS_STYLE: nopin
  dependencies: []
  tags:
  - robot
  - linux
  before_script:
  - if [ ! -z "$ACNG" ]; then sed -i -e "s,http://,$ACNG," /etc/apt/sources.list; else echo "no proxy configured"; fi
  - apt-get update
  - apt-get -y install --no-install-recommends autoconf automake libtool libassuan-dev libgpg-error-dev libpcsclite-dev libp11-kit-dev libgtk-3-dev libssl-dev libxml2-dev libcurl4-openssl-dev libproxy-dev plantuml zip gettext build-essential g++ git graphviz
  - pushd $LINUX_BASEDIR
  - autoreconf -f -i
  - popd
  script:
  - pushd $LINUX_BASEDIR
  - ./configure --libexecdir=$(pwd)/scripts/linux/hackbin --disable-pinentry
  - make -j $(nproc) check
  - popd
  allow_failure: true

.repro:debian:
  tags:
  - docker
  image: $CI_REGISTRY_IMAGE/deb-repro:$CI_COMMIT_REF_SLUG
  dependencies: []
  before_script:
  - if [ ! -z "$ACNG" ]; then sed -i -e "s,http://,$ACNG/," /etc/apt/sources.list; else echo "no proxy configured"; fi
  - apt-get update
  - apt-get -y install reprotest diffoscope equivs devscripts faketime disorderfs sudo
  - mk-build-deps -r -i -t "apt-get -y -o Debug::pkgProblemResolver=yes --no-install-recommends"
  - autoreconf -f -i
  script:
  - reprotest $LINUX_BASEDIR
  allow_failure: true

.scan-build:
  tags:
    - docker
  image: $CI_REGISTRY_IMAGE/deb-scan-build:$CI_COMMIT_REF_SLUG
  before_script:
  - if [ ! -z "$ACNG" ]; then sed -i -e "s,http://,$ACNG/," /etc/apt/sources.list; else echo "no proxy configured"; fi
  - apt-get update
  - apt-get -y install --no-install-recommends clang-tools autoconf automake libtool libassuan-dev libgpg-error-dev libpcsclite-dev libp11-kit-dev libgtk-3-dev libssl-dev libxml2-dev libcurl4-openssl-dev libproxy-dev plantuml zip gettext build-essential git g++ graphviz curl
  - pushd $LINUX_BASEDIR
  - autoreconf -f -i
  - ./configure
  - popd
  script:
  - pushd $LINUX_BASEDIR
  - scan-build --status-bugs -o public make -j $(nproc)
  - popd
  artifacts:
    when: on_failure
    paths:
    - public

.srpm:
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  image: $CI_REGISTRY_IMAGE/fed-build:$CI_COMMIT_REF_SLUG
  before_script:
  - dnf -y install rpm-build git rpmdevtools
  - rpmdev-setuptree
  - VER=$(cat products/source/version)
  - VERSHORT=${VER#*-}
  - mv products/source/eid-mw-$VER.tar.gz $HOME/rpmbuild/SOURCES/
  - tar --extract --file=$HOME/rpmbuild/SOURCES/eid-mw-$VER.tar.gz -C $HOME/rpmbuild/SPECS/ --strip-components=2 eid-mw-$VER/rpm/eid-mw.spec
  - tar --extract --file=$HOME/rpmbuild/SOURCES/eid-mw-$VER.tar.gz -C $HOME/rpmbuild/SOURCES/ --strip-components=2 eid-mw-$VER/rpm/baselibs.conf
  script:
  - rpmbuild --define "revision $VERSHORT" -bs $HOME/rpmbuild/SPECS/eid-mw.spec
  after_script:
  - mkdir -p products/srpm/
  - cp $HOME/rpmbuild/SRPMS/eid-mw-*.src.rpm products/srpm/
  - cp products/source/version products/srpm/
  artifacts:
    paths:
    - products/srpm

.build-deb-base:
  variables:
    GIT_STRATEGY: none
  before_script:
  - VER=$(cat products/source/version)
  - VERSHORT=${VER#*-}
  - COMMITDATE=$(cat products/source/date)
  - scripts/build-aux/deb-cl.pl debian/changelog $COMMITDATE $VER
  - download-debuerreotype-tarball.sh $CODE $ARCH
  - TARGET=continuous
  - if [ $CANDIDATEBRANCH = $CI_COMMIT_REF_NAME ]; then TARGET=candidate; fi
  - if [ ! -z "$CI_COMMIT_TAG" ]; then TARGET=candidate; fi
  - if [ $ARCH = "i386" ]; then DASHA="-A -s"; else DASHA=""; fi
  script:
  - sbuild -n $DASHA -d $TARGET-$CODE -c $CODE-$ARCH-sbuild --arch=$ARCH
  after_script:
  - mkdir -p products/deb/
  - dcmd mv *ges products/deb/
  artifacts:
    paths:
    - products/deb
    when:
      on_success
  tags:
  - docker
  image: tianon/sbuild
  except:
    variables:
    - $CODE == null
    - $CODE == ""

.build-fed-base:
  retry: 2
  tags:
  - docker
  image: $CI_REGISTRY_IMAGE/fed-build:$CI_COMMIT_REF_SLUG
  variables:
    GIT_STRATEGY: none
  before_script:
  - dnf -y install mock git
  - VER=$(cat products/srpm/version)
  - VERSHORT=${VER#*-}
  script:
  - mock --old-chroot --verbose -r $DIST-$DVER-$ARCH --rebuild products/srpm/eid-mw-*.src.rpm --define "revision $VERSHORT"
  after_script:
  - mkdir -p products/$DIST-$DVER-$ARCH
  - cp /var/lib/mock/$DIST-$DVER-$ARCH/result/eid*rpm products/$DIST-$DVER-$ARCH/
  artifacts:
    paths:
    - products/$DIST-$DVER-$ARCH
    when:
      on_success
  except:
    variables:
    - $DVER == null
    - $DVER == ""

.build-suse-base:
  dependencies:
    - src:srpm
  stage: binary-package
  retry: 2
  tags:
    - docker
  image: $CI_REGISTRY_IMAGE/suse-build:$CI_COMMIT_REF_SLUG
  before_script:
    - pushd $LINUX_BASEDIR
    - VERSHORT=$(git describe --dirty | sed -e 's/-/./g')
    - popd
  script:
    - http_proxy="$ACNG" build --no-checks --clean -debug --dist sl$DVER --repo http://download.opensuse.org/distribution/leap/$DVER/repo/oss --define "revision $VERSHORT" products/srpm/eid-mw-*.src.rpm
  after_script:
    - mkdir -p products/$DIST-$DVER-$ARCH
    - mv /var/tmp/build-root/home/abuild/rpmbuild/RPMS/*/*rpm products/$DIST-$DVER-$ARCH/
  artifacts:
    paths:
      - products/$DIST-$DVER-$ARCH
    when:
      on_success
  except:
    variables:
    - $DVER == null
    - $DVER == ""

.inject-debs:
  tags:
    - repobuilder
  before_script:
    - dcmd mv products/deb/*ges /srv/repo/reprepro/incoming
  script:
    - cd /srv/repo/reprepro && reprepro processincoming incoming
  variables:
    GIT_STRATEGY: none

.inject-fed:
  tags:
    - repobuilder
  script:
    - export TARGET=continuous
    - if [ $CANDIDATEBRANCH = $CI_COMMIT_REF_NAME ]; then TARGET=candidate; fi
    - if [ ! -z "$CI_COMMIT_TAG" ]; then TARGET=candidate; fi
    - bash -x $LINUX_BASEDIR/scripts/build-aux/fed-rel.sh

.inject-suse:
  tags:
    - repobuilder
  script:
    - export TARGET=continuous
    - if [ $CANDIDATEBRANCH = $CI_COMMIT_REF_NAME ]; then TARGET=candidate; fi
    - if [ ! -z "$CI_COMMIT_TAG" ]; then TARGET=candidate; fi
    - bash -x $LINUX_BASEDIR/scripts/build-aux/suse-rel.sh

.inject-source:
  tags:
  - repobuilder
  script:
  - VER=$(cat products/source/version)
  - SOURCETGZ=products/source/eid-mw-${VER}.tar.gz
  - SOURCEZIP=products/source/eid-mw-${VER}.zip
  - cp $SOURCETGZ $SOURCEZIP /srv/dist/eid-mw/continuous/sources/
  - cd /srv/dist/eid-mw/continuous/sources
  - gpg --yes --batch --passphrase "" --default-key $GPG_TEST_KEY_ID --no-tty -b --armor $(basename $SOURCETGZ)
  variables:
    GIT_STRATEGY: none
