---
stages:
 - source
 - source-package
 - binary-package
 - build-repository
 - sync
build:source:
  variables:
    GIT_STRATEGY: clone
  stage: source
  tags:
    - docker
  image: debian:testing
  before_script:
    - if [ ! -z "$ACNG" ]; then sed -i -e "s,http://,$ACNG/," /etc/apt/sources.list; else echo "no proxy configured"; fi
    - apt-get update
    - apt-get -y install --no-install-recommends autoconf automake libtool libpcsclite-dev libp11-kit-dev libgtk-3-dev libassuan-dev libgpg-error-dev libssl-dev libxml2-dev libcurl4-openssl-dev libproxy-dev plantuml zip gettext build-essential g++ git graphviz
  script:
    - autoreconf -f -i
    - ./configure
    - make -j $(nproc) distcheck
  after_script:
    - mkdir -p products/source
    - cp eid-mw-*.tar.gz eid-mw-*.zip products/source/
  artifacts:
    when:
      on_success
    paths:
      - products/source
.build-deb: &build-deb
  dependencies:
    - build:source
  before_script:
    - mkdir build
    - cd build && tar xvf ../products/source/eid-mw-*.tar.gz --strip-components=1
    - ../scripts/build-aux/deb-cl.pl debian/changelog
  stage: binary-package
  script:
    - TARGET=continuous
    - if [ $CANDIDATEBRANCH = $CI_COMMIT_REF_NAME ]; then TARGET=candidate; fi
    - if [ ! -z "$CI_COMMIT_TAG" ]; then TARGET=candidate; fi
    - if [ $ARCH = "i386" ]; then DASHA="-A -s"; else DASHA=""; fi
    - sbuild -n $DASHA -d $TARGET-$CODE -c $CODE-$ARCH-sbuild --arch=$ARCH
  after_script:
    - mkdir -p products/deb/
    - dcmd mv *ges products/deb/
  image: tianon/sbuild
  artifacts:
    paths:
      - products/deb
    when:
      on_success
  tags:
    - sbuild
build:srpm:
  stage: source-package
  tags:
    - docker
  image: fedora:29
  before_script:
    - http_proxy=$ACNG dnf -y install rpm-build git rpmdevtools
    - rpmdev-setuptree
    - VER=$(scripts/build-aux/genver.sh)
    - VERSHORT=$(git describe --dirty | sed -e 's/-/./g')
    - mv products/source/eid-mw-$VER.tar.gz $HOME/rpmbuild/SOURCES/
    - tar --extract --file=$HOME/rpmbuild/SOURCES/eid-mw-$VER.tar.gz -C $HOME/rpmbuild/SPECS/ --strip-components=2 eid-mw-$VER/rpm/eid-mw.spec
    - tar --extract --file=$HOME/rpmbuild/SOURCES/eid-mw-$VER.tar.gz -C $HOME/rpmbuild/SOURCES/ --strip-components=2 eid-mw-$VER/rpm/baselibs.conf
  script:
    - rpmbuild --define "revision $VERSHORT" -bs $HOME/rpmbuild/SPECS/eid-mw.spec
  after_script:
    - mkdir -p products/srpm/
    - cp $HOME/rpmbuild/SRPMS/eid-mw-*.fc29.src.rpm products/srpm/
  artifacts:
    paths:
      - products/srpm
inject-debs:
  dependencies:
    - build:deb8-32
    - build:deb9-32
    - build:deb10-32
    - build:sid-32
    - build:xenial-32
    - build:bionic-32
    - build:cosmic-32
    - build:disco-32
    - build:deb8-64
    - build:deb9-64
    - build:deb10-64
    - build:sid-64
    - build:xenial-64
    - build:bionic-64
    - build:cosmic-64
    - build:disco-64
  stage: build-repository
  tags:
    - repobuilder
  before_script:
    - dcmd mv products/deb/*ges /srv/repo/reprepro/incoming
  script:
    - cd /srv/repo/reprepro && reprepro processincoming incoming
  variables:
    GIT_STRATEGY: none
  only:
    variables:
    - $CI_COMMIT_REF_NAME == "master"
    - $CI_COMMIT_REF_NAME == $CANDIDATEBRANCH
    - $CI_COMMIT_TAG
inject-fed:
  variables:
    GIT_STRATEGY: none
  only:
    variables:
    - $CI_COMMIT_REF_NAME == "master"
    - $CI_COMMIT_REF_NAME == $CANDIDATEBRANCH
    - $CI_COMMIT_TAG
  dependencies:
    - build:fedora-28-32
    - build:fedora-28-64
    - build:fedora-29-32
    - build:fedora-29-64
    - build:centos-6-32
    - build:centos-6-64
    - build:centos-7-64
  stage: build-repository
  tags:
    - repobuilder
  script:
    - TARGET=continuous
    - if [ $CANDIDATEBRANCH = $CI_COMMIT_REF_NAME ]; then TARGET=candidate; fi
    - if [ ! -z "$CI_COMMIT_TAG" ]; then TARGET=candidate; fi
    - ARCHMAP=([i386]=32 [x86_64]=64)
    - DISTS=([fedora]="28 29" [epel]="6 7")
    - VERARCHS=([6]="i386 x86_64" [7]="x86_64" [28]="i386 x86_64" [29]="i386 x86_64")
    - for dist in fedora epel; do for vers in ${DISTS[$dist]}; do for arch in ${VERARCHS[$vers]}; do mkdir -p /srv/repo/repo/rpm/$TARGET/$dist/$vers/RPMS/$arch; for i in products/$dist-$vers-${ARCHS[$arch]}/*rpm; do targetfile=/srv/repo/repo/rpm/$TARGET/$dist/$vers/RPMS/$arch/$(basename $i); echo "$i => $targetfile"; cp $i $targetfile; rpmsign --resign --key-id=$GPG_TEST_KEY_ID $targetfile; done; done; createrepo /srv/repo/repo/rpm/$TARGET/$dist/$vers; done; done
build:deb8-32:
  <<: *build-deb
  variables:
    DIST: debian
    CODE: jessie
    SHORT: deb8
    ARCH: i386
build:deb8-64:
  <<: *build-deb
  variables:
    DIST: debian
    CODE: jessie
    SHORT: deb8
    ARCH: amd64
build:deb9-32:
  <<: *build-deb
  variables:
    DIST: debian
    CODE: stretch
    SHORT: deb9
    ARCH: i386
build:deb9-64:
  <<: *build-deb
  variables:
    DIST: debian
    CODE: stretch
    SHORT: deb9
    ARCH: amd64
build:deb10-32:
  <<: *build-deb
  variables:
    DIST: debian
    CODE: buster
    SHORT: deb10
    ARCH: i386
build:deb10-64:
  <<: *build-deb
  variables:
    DIST: debian
    CODE: buster
    SHORT: deb10
    ARCH: amd64
build:sid-32:
  <<: *build-deb
  variables:
    DIST: debian
    CODE: sid
    SHORT: sid
    ARCH: i386
build:sid-64:
  <<: *build-deb
  variables:
    DIST: debian
    CODE: sid
    SHORT: sid
    ARCH: amd64
build:xenial-32:
  <<: *build-deb
  variables:
    DIST: ubuntu
    CODE: xenial
    SHORT: u1604
    ARCH: i386
build:xenial-64:
  <<: *build-deb
  variables:
    DIST: ubuntu
    CODE: xenial
    SHORT: u1604
    ARCH: amd64
build:bionic-32:
  <<: *build-deb
  variables:
    DIST: ubuntu
    CODE: bionic
    SHORT: u1804
    ARCH: i386
build:bionic-64:
  <<: *build-deb
  variables:
    DIST: ubuntu
    CODE: bionic
    SHORT: u1804
    ARCH: amd64
build:cosmic-32:
  <<: *build-deb
  variables:
    DIST: ubuntu
    CODE: cosmic
    SHORT: u1810
    ARCH: i386
build:cosmic-64:
  <<: *build-deb
  variables:
    DIST: ubuntu
    CODE: cosmic
    SHORT: u1810
    ARCH: amd64
build:disco-32:
  <<: *build-deb
  variables:
    DIST: ubuntu
    CODE: disco
    SHORT: u1904
    ARCH: i386
build:disco-64:
  <<: *build-deb
  variables:
    DIST: ubuntu
    CODE: disco
    SHORT: u1904
    ARCH: amd64
.build-fed: &build-fed
  dependencies:
    - build:srpm
  stage: binary-package
  tags:
    - docker
    - fedora
  image: fedora:29
  before_script:
    - if [ ! -z "$ACNG" ]; then sed -i -e '/metalink/d;s/^#baseurl/baseurl/' /etc/yum.repos.d/*.repo; fi
    - http_proxy="$ACNG" dnf -y install mock git
    - if [ ! -z "$ACNG" ]; then sed -i -e '/metalink/d;s/^#baseurl/baseurl/' /etc/mock/$DIST-$DVER-$ARCH.cfg; for i in $(grep mirrorlist /etc/mock/$DIST-$DVER-$ARCH.cfg; do sed -i -e "s,mirrorlist=$i,baseurl=$(curl $i|grep http://|while read a; do echo -n $a' '; done; echo ',')" /etc/mock/$DIST-$DVER-$ARCH.cfg; done
    - VERSHORT=$(git describe --dirty | sed -e 's/-/./g')
  script:
    - http_proxy="$ACNG" mock --old-chroot --verbose -r $DIST-$DVER-$ARCH --rebuild products/srpm/eid-mw-*.fc29.src.rpm --define "revision $VERSHORT"
  after_script:
    - mkdir -p products/$DIST-$DVER-$ARCH
    - cp /var/lib/mock/$DIST-$DVER-$ARCH/result/eid*rpm products/$DIST-$DVER-$ARCH/
  artifacts:
    paths:
      - products/$DIST-$DVER-$ARCH
    when:
      on_success
build:fedora-28-32:
  <<: *build-fed
  variables:
    DIST: fedora
    DVER: 28
    ARCH: i386
build:fedora-29-32:
  <<: *build-fed
  variables:
    DIST: fedora
    DVER: 29
    ARCH: i386
build:centos-6-32:
  <<: *build-fed
  variables:
    DIST: epel
    DVER: 6
    ARCH: i386
build:fedora-28-64:
  <<: *build-fed
  variables:
    DIST: fedora
    DVER: 28
    ARCH: x86_64
build:fedora-29-64:
  <<: *build-fed
  variables:
    DIST: fedora
    DVER: 29
    ARCH: x86_64
build:centos-6-64:
  <<: *build-fed
  variables:
    DIST: epel
    DVER: 6
    ARCH: x86_64
build:centos-7-64:
  <<: *build-fed
  variables:
    DIST: epel
    DVER: 7
    ARCH: x86_64
